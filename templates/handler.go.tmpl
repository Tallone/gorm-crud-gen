package handlers

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
	"{{.PackageName}}/models"
	"{{.PackageName}}/services"
)

type {{.StructName}}Handler struct {
	service *services.{{.StructName}}Service
}

func New{{.StructName}}Handler(service *services.{{.StructName}}Service) *{{.StructName}}Handler {
	return &{{.StructName}}Handler{service: service}
}

// Create{{.StructName}} godoc
// @Summary Create a new {{.StructName}}
// @Description Create a new {{.StructName}} with the input payload
// @Tags {{.StructName}}
// @Accept json
// @Produce json
// @Param {{.VarName}} body models.{{.StructName}} true "Create {{.StructName}}"
// @Success 201 {object} models.{{.StructName}}
// @Failure 400 {object} ErrorResponse
// @Router /{{.VarName}}s [post]
func (h *{{.StructName}}Handler) Create{{.StructName}}(c *gin.Context) {
	var {{.VarName}} models.{{.StructName}}
	if err := c.ShouldBindJSON(&{{.VarName}}); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if err := h.service.Create(&{{.VarName}}); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, {{.VarName}})
}

// Get{{.StructName}} godoc
// @Summary Get a {{.StructName}} by ID
// @Description Get a {{.StructName}} by ID
// @Tags {{.StructName}}
// @Accept json
// @Produce json
// @Param id path int true "{{.StructName}} ID"
// @Success 200 {object} models.{{.StructName}}
// @Failure 404 {object} ErrorResponse
// @Router /{{.VarName}}s/{id} [get]
func (h *{{.StructName}}Handler) Get{{.StructName}}(c *gin.Context) {
	id, err := strconv.ParseUint(c.Param("id"), 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}

	{{.VarName}}, err := h.service.GetByID(uint(id))
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	if {{.VarName}} == nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "{{.StructName}} not found"})
		return
	}

	c.JSON(http.StatusOK, {{.VarName}})
}

// Update{{.StructName}} godoc
// @Summary Update a {{.StructName}}
// @Description Update a {{.StructName}} with the input payload
// @Tags {{.StructName}}
// @Accept json
// @Produce json
// @Param id path int true "{{.StructName}} ID"
// @Param {{.VarName}} body models.{{.StructName}} true "Update {{.StructName}}"
// @Success 200 {object} models.{{.StructName}}
// @Failure 400 {object} ErrorResponse
// @Failure 404 {object} ErrorResponse
// @Router /{{.VarName}}s/{id} [put]
func (h *{{.StructName}}Handler) Update{{.StructName}}(c *gin.Context) {
	id, err := strconv.ParseUint(c.Param("id"), 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}

	var {{.VarName}} models.{{.StructName}}
	if err := c.ShouldBindJSON(&{{.VarName}}); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	{{.VarName}}.ID = uint(id)
	if err := h.service.Update(&{{.VarName}}); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, {{.VarName}})
}

// Delete{{.StructName}} godoc
// @Summary Delete a {{.StructName}}
// @Description Delete a {{.StructName}} by ID
// @Tags {{.StructName}}
// @Accept json
// @Produce json
// @Param id path int true "{{.StructName}} ID"
// @Success 204 {string} string "No Content"
// @Failure 400 {object} ErrorResponse
// @Failure 404 {object} ErrorResponse
// @Router /{{.VarName}}s/{id} [delete]
func (h *{{.StructName}}Handler) Delete{{.StructName}}(c *gin.Context) {
	id, err := strconv.ParseUint(c.Param("id"), 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}

	if err := h.service.Delete(uint(id)); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.Status(http.StatusNoContent)
}

// List{{.StructName}}s godoc
// @Summary List {{.StructName}}s
// @Description Get a list of {{.StructName}}s
// @Tags {{.StructName}}
// @Accept json
// @Produce json
// @Param page query int false "Page number"
// @Param page_size query int false "Page size"
// @Success 200 {array} models.{{.StructName}}
// @Failure 400 {object} ErrorResponse
// @Router /{{.VarName}}s [get]
func (h *{{.StructName}}Handler) List{{.StructName}}s(c *gin.Context) {
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	pageSize, _ := strconv.Atoi(c.DefaultQuery("page_size", "10"))

	{{.VarName}}s, err := h.service.List(page, pageSize)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, {{.VarName}}s)
}

{{range .Indexes}}
{{if .Unique}}
// Get{{$.StructName}}By{{range $i, $e := .Fields}}{{if $i}}And{{end}}{{$e | title}}{{end}} godoc
// @Summary Get a {{$.StructName}} by {{range $i, $e := .Fields}}{{if $i}} and {{end}}{{$e}}{{end}}
// @Description Get a {{$.StructName}} by {{range $i, $e := .Fields}}{{if $i}} and {{end}}{{$e}}{{end}}
// @Tags {{$.StructName}}
// @Accept json
// @Produce json
{{range .Fields}}
// @Param {{.}} query {{index $.FieldTypes .}} true "{{$.StructName}} {{.}}"
{{end}}
// @Success 200 {object} models.{{$.StructName}}
// @Failure 400 {object} ErrorResponse
// @Failure 404 {object} ErrorResponse
// @Router /{{$.VarName}}s/by-{{range $i, $e := .Fields}}{{if $i}}-and{{end}}{{$e | kebab}}{{end}} [get]
func (h *{{$.StructName}}Handler) Get{{$.StructName}}By{{range $i, $e := .Fields}}{{if $i}}And{{end}}{{$e | title}}{{end}}(c *gin.Context) {
	{{range .Fields}}
	{{.}} := c.Query("{{.}}")
	{{end}}

	{{$.VarName}}, err := h.service.GetBy{{range $i, $e := .Fields}}{{if $i}}And{{end}}{{$e | title}}{{end}}({{range $i, $e := .Fields}}{{if $i}}, {{end}}{{$e}}{{end}})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	if {{$.VarName}} == nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "{{$.StructName}} not found"})
		return
	}

	c.JSON(http.StatusOK, {{$.VarName}})
}
{{end}}
{{end}}