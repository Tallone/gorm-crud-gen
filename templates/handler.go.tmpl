package handler

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
	"{{.PackageName}}/internal/cons"
	"{{.PackageName}}/internal/entity"
	"{{.PackageName}}/internal/service"
	"{{.PackageName}}/internal/http/response"
	"{{.PackageName}}/internal/model"
	"{{.PackageName}}/internal/g/errors"
)

type {{.StructName}}Handler struct {
	service *service.{{.StructName}}Service
}

func New{{.StructName}}Handler(service *service.{{.StructName}}Service) *{{.StructName}}Handler {
	return &{{.StructName}}Handler{service: service}
}



// Save{{.StructName}} godoc
// @Summary Save {{.StructName}}
// @Description Create a new {{.StructName}} if ID is null, otherwise update the {{.StructName}}
// @Tags {{.StructName}}
// @Accept json
// @Produce json
// @Param {{.VarName}} body model.Optional{{.StructName}} true "Save {{.StructName}}"
// @Success 200 {object}  response.Response{data=entity.{{.StructName}}}
// @Router /v1/{{.VarName}}	[post]
func (h *{{.StructName}}Handler) Save{{.StructName}}(c *gin.Context) {
	uid, exists := c.Get(cons.Uid)
	if !exists {
		response.Fail(c, errors.ErrorAuthFailed)
		return
	}

	var {{.VarName}} Optional{{.StructName}}
	if err := c.ShouldBindJSON(&{{.VarName}}); err != nil {
		response.Fail(c, errors.ErrorInvalidRequest)
		return
	}

	var entity entity.{{.StructName}}
	err := mapstructure.Decode({{.VarName}}, &entity)
	if err != nil {
		response.Fail(c, errors.ErrorInvalidRequest)
		return
	}

	if err := h.service.Update(c, &entity); err != nil {
		response.Fail(c, err)
		return
	}

	response.Ok(c, entity)
}

// Get{{.StructName}} godoc
// @Summary Get a {{.StructName}} by ID
// @Description Get a {{.StructName}} by ID
// @Tags {{.StructName}}
// @Accept json
// @Produce json
// @Param id path int true "{{.StructName}} ID"
// @Success 200 {object} response.Response{data=entity.{{.StructName}}}
// @Router /v1/{{.VarName}}/{id} [get]
func (h *{{.StructName}}Handler) Get{{.StructName}}(c *gin.Context) {
	uid, exists := c.Get(cons.Uid)
	if !exists {
		response.Fail(c, errors.ErrorAuthFailed)
		return
	}

	id, err := strconv.ParseUint(c.Param("id"), 10, 32)
	if err != nil {
		response.Fail(c, errors.ErrorInvalidRequest)
		return
	}

	{{.VarName}}, err := h.service.GetByID(c, uint(id))
	if err != nil {
		response.Fail(c, err)
		return
	}

	response.Ok(c, {{.VarName}})
}

// Delete{{.StructName}} godoc
// @Summary Delete a {{.StructName}}
// @Description Delete a {{.StructName}} by ID
// @Security Token
// @Tags {{.StructName}}
// @Accept json
// @Produce json
// @Param id path int true "{{.StructName}} ID"
// @Success 200 {object} response.Response
// @Router /v1/{{.VarName}}/{id} [delete]
func (h *{{.StructName}}Handler) Delete{{.StructName}}(c *gin.Context) {
	uid, exists := c.Get(cons.Uid)
	if !exists {
		response.Fail(c, errors.ErrorAuthFailed)
		return
	}

	id, err := strconv.ParseUint(c.Param("id"), 10, 32)
	if err != nil {
		response.Fail(c, errors.ErrorInvalidRequest)
		return
	}

	if err := h.service.Delete(c, uint(id)); err != nil {
		response.Fail(c, err)
		return
	}

	response.JustOk(c)
}

// List{{.StructName}}s godoc
// @Summary List {{.StructName}}s
// @Description Get a list of {{.StructName}}s
// @Security Token
// @Tags {{.StructName}}
// @Accept json
// @Produce json
// @Param page query int false "Page number"
// @Param pageSize query int false "Page size"
// @Success 200 {object} response.Response{data=[]entity.{{.StructName}}}
// @Router /v1/{{.VarName}}	[get]
func (h *{{.StructName}}Handler) List{{.StructName}}s(c *gin.Context) {
	uid, exists := c.Get(cons.Uid)
	if !exists {
		response.Fail(c, errors.ErrorAuthFailed)
		return
	}

	var page model.Pagination
	if err := c.ShouldBindQuery(&page); err != nil {
		response.Fail(c, errors.ErrorInvalidRequest)
		return
	}

	{{.VarName}}s, err := h.service.List(c, page.Page, page.PageSize)
	if err != nil {
		response.Fail(c, err)
		return
	}

	response.Ok(c, {{.VarName}}s)
}

{{range .Indexes}}
{{if .Unique}}
// Get{{$.StructName}}By{{range $i, $e := .Fields}}{{if $i}}And{{end}}{{$e | title}}{{end}} godoc
// @Summary Get a {{$.StructName}} by {{range $i, $e := .Fields}}{{if $i}} and {{end}}{{$e}}{{end}}
// @Description Get a {{$.StructName}} by {{range $i, $e := .Fields}}{{if $i}} and {{end}}{{$e}}{{end}}
// @Tags {{$.StructName}}
// @Accept json
// @Produce json
{{range .Fields}}
// @Param {{.}} query {{index $.FieldTypes .}} true "{{$.StructName}} {{.}}"
{{end}}
// @Success 200 {object} entity.{{$.StructName}}
// @Router /v1/{{$.VarName}}/by-{{range $i, $e := .Fields}}{{if $i}}-and{{end}}{{$e | kebab}}{{end}} [get]
func (h *{{$.StructName}}Handler) Get{{$.StructName}}By{{range $i, $e := .Fields}}{{if $i}}And{{end}}{{$e | title}}{{end}}(c *gin.Context) {
	{{range .Fields}}
	{{.}} := c.Query("{{.}}")
	{{end}}

	{{$.VarName}}, err := h.service.GetBy{{range $i, $e := .Fields}}{{if $i}}And{{end}}{{$e | title}}{{end}}(c, {{range $i, $e := .Fields}}{{if $i}}, {{end}}{{$e}}{{end}})
	if err != nil {
		response.Fail(c, err)
		return
	}

	response.Ok(c, {{$.VarName}})
}
{{end}}
{{end}}