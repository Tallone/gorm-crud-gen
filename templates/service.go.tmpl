package service

import (
	"context"

	"github.com/go-viper/mapstructure/v2"
	"golang.org/x/exp/maps"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"{{.PackageName}}/internal/entity"
	"{{.PackageName}}/internal/model"
	"{{.PackageName}}/internal/g/errors"
)

// TODO: Move it to model package
// Optional{{.StructName}} is a struct that every field is a pointer
type Optional{{.StructName}} struct {
{{ range .StructFields}}
	{{.Name}} *{{.Type}}
{{ end}}
}

type {{.ServiceName}} struct {
	db *gorm.DB
}

func New{{.ServiceName}}(db *gorm.DB) *{{.ServiceName}} {
	return &{{.ServiceName}}{db: db}
}


func (s *{{.ServiceName}}) Save(ctx context.Context, db *gorm.DB, {{.VarName}} *model.Optional{{.StructName}}) (*entity.{{.StructName}}, error) {
	return s.SaveWithDB(ctx, s.db, {{.VarName}})
}

func (s *{{.ServiceName}}) SaveWithDB(ctx context.Context, db *gorm.DB, {{.VarName}} *model.Optional{{.StructName}}) (*entity.{{.StructName}}, error) {
	var m map[string]interface{}
	if err := mapstructure.Decode({{.VarName}}, &m); err != nil {
		return nil, err
	}

	var e entity.{{.StructName}}
	if err := mapstructure.Decode(m, &e); err != nil {
		return nil, err
	}

	if {{.VarName}}.ID != nil {
		e.ID = *{{.VarName}}.ID
		delete(m, "ID")
		err := db.Model(&e).Clauses(clause.Returning{}).Select(maps.Keys(m)).Updates(e).Error
		return &e, err
	}

	err := db.Create(&e).Error
	return &e, err
}

func (s *{{.ServiceName}}) Create(ctx context.Context, {{.VarName}} *entity.{{.StructName}}) error {
	return s.db.Create({{.VarName}}).Error
}

func (s *{{.ServiceName}}) GetByID(ctx context.Context, id uint) (*entity.{{.StructName}}, error) {
	var {{.VarName}} entity.{{.StructName}}
	if err := s.db.First(&{{.VarName}}, id).Error; err != nil {
		return nil, errors.NewDbError(err)
	}
	return &{{.VarName}}, nil
}

func (s *{{.ServiceName}}) Update(ctx context.Context, {{.VarName}} *entity.{{.StructName}}) error {
	return s.db.Save({{.VarName}}).Error
}

func (s *{{.ServiceName}}) Delete(ctx context.Context, id uint) error {
	return s.db.Delete(&entity.{{.StructName}}{}, id).Error
}

func (s *{{.ServiceName}}) List(ctx context.Context, page, pageSize int) ([]entity.{{.StructName}}, error) {
	var {{.VarName}}s []entity.{{.StructName}}
	offset := (page - 1) * pageSize
	if err := s.db.Offset(offset).Limit(pageSize).Find(&{{.VarName}}s).Error; err != nil {
		return nil, errors.NewDbError(err)
	}
	return {{.VarName}}s, nil
}

{{range .Indexes}}
func (s *{{$.StructName}}Service) GetBy{{range $i, $e := .Fields}}{{if $i}}And{{end}}{{$e | title}}{{end}}(ctx context.Context, {{range $i, $e := .Fields}}{{if $i}}, {{end}}{{$e | lower}} {{index $.FieldTypes $e}}{{end}}) (*entity.{{$.StructName}}, error) {
	var {{$.VarName}} entity.{{$.StructName}}
	if err := s.db.Where("{{range $i, $e := .Fields}}{{if $i}} AND {{end}}{{$e | snake}} = ?{{end}}", {{range $i, $e := .Fields}}{{if $i}}, {{end}}{{$e | lower}}{{end}}).First(&{{$.VarName}}).Error; err != nil {
		return nil, errors.NewDbError(err)
	}
	return &{{$.VarName}}, nil
}
{{if not .Unique}}
func (s *{{$.StructName}}Service) ListBy{{range $i, $e := .Fields}}{{if $i}}And{{end}}{{$e | title}}{{end}}(ctx context.Context, {{range $i, $e := .Fields}}{{if $i}}, {{end}}{{$e | lower}} {{index $.FieldTypes $e}}{{end}}, page, pageSize int) ([]entity.{{$.StructName}}, error) {
	var {{$.VarName}}s []entity.{{$.StructName}}
	offset := (page - 1) * pageSize
	if err := s.db.Where("{{range $i, $e := .Fields}}{{if $i}} AND {{end}}{{$e | snake}} = ?{{end}}", {{range $i, $e := .Fields}}{{if $i}}, {{end}}{{$e | lower}}{{end}}).Offset(offset).Limit(pageSize).Find(&{{$.VarName}}s).Error; err != nil {
		return nil, errors.NewDbError(err)
	}
	return {{$.VarName}}s, nil
}
{{end}}
{{end}}